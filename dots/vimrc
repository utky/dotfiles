" vim:set foldmethod=marker:
set nocompatible

" Vundle Condiguration"{{{
"---------------------------------------------------------------------------
"---------------------------------------------------------------------------

filetype plugin indent off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" originalrepos on github
Plugin 'gmarik/Vundle.vim'

Plugin 'scratch.vim'

Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'mattn/ctrlp-filer'
Plugin 'mattn/ctrlp-register'

Plugin 'Shougo/vimproc.vim'

" Git Plugin
Plugin 'tpope/vim-fugitive'

" Scala plugin
Plugin 'derekwyatt/vim-scala'

" Text editting plugin
Plugin 'glidenote/memolist.vim'

" Haskell plugin
Plugin 'dag/vim2hs'
Plugin 'eagletmt/ghcmod-vim'
Plugin 'scrooloose/syntastic'

" UI Plugins
Plugin 'altercation/vim-colors-solarized'
"Plugin 'Lokaltog/powerline', { 'rtp' : 'powerline/bindings/vim'}
"Plugin 'bling/vim-airline'
"Plugin 'powerline/powerline'
Plugin 'itchyny/lightline.vim'


Plugin 'lambdatoast/elm.vim'

Plugin 'fatih/vim-go'

"Plugin 'vim-scripts/fcitx.vim'
"Plugin 'fuenor/im_control.vim'

"Plugin 'koron/imcsc-vim', {'rtp': 'fcitx-python/'}
"
"Plugin 'the-lambda-church/coquille'

call vundle#end()            " required
"
if has('win32')
  "set runtimepath^=$HOME/.vim
  "set runtimepath+=$HOME/.vim/after
endif

filetype plugin on
filetype indent on
syntax on
"}}}

" Path Configuration {{{

let $PATH = expand('~/bin').':'.$PATH

" }}}

"---------------------------------------------------------------------------
"---------------------------------------------------------------------------
set helplang=en,ja

"---------------------------------------------------------------------------
"---------------------------------------------------------------------------
set ignorecase
set smartcase
" noincsearch : OFF
" incsearch : ON
set noincsearch

" Edit Configuration"{{{
"---------------------------------------------------------------------------
"---------------------------------------------------------------------------
set textwidth=0
set shiftwidth=2
set tabstop=4
set expandtab
set autoindent
set backspace=indent,eol,start
set wrapscan
set showmatch
set wildmenu
set formatoptions+=mM
set tags=./.tags,.tags;
"}}}

" View Configuration"{{{
"---------------------------------------------------------------------------
" GUI
"---------------------------------------------------------------------------
" set number
set ruler
set nolist
set listchars=eol:<
"set listchars=tab:>-,extends:<,trail:-,eol:<
set wrap
set laststatus=2
set cmdheight=2
set showcmd
set title
set nocursorline

"}}}

"---------------------------------------------------------------------------
"---------------------------------------------------------------------------
set nobackup
set backupdir=$HOME
set undodir=$HOME/.vimundo
set directory=$HOME
let g:netrw_altv=1
let g:netrw_alto=1
let g:netrw_winsize=60



" Key Mapping Configuration"{{{
"---------------------------------------------------------------------------
"---------------------------------------------------------------------------
let mapleader = 's'

noremap! <silent> <S-CR> <ESC>
"noremap! <silent> <C-k> <ESC>
vnoremap <silent> <S-CR> <ESC>
vnoremap <silent> <C-k> <ESC>
nnoremap <silent> <S-CR> o<ESC>


nnoremap <silent> <C-Tab> :<C-u>tabn<CR>
nnoremap <silent> <C-S-Tab> :<C-u>tabp<CR>

noremap j gj
noremap k gk
noremap gj j
noremap gk k
" noremap <C-j> L 
" noremap <C-k> H 
" noremap <C-m> M 
" Anti-CTRL key
" noremap <Space>j <C-f>
" noremap <Space>k <C-b>
" nnoremap W <C-w>

inoremap { {}<Left>
inoremap [ []<Left>
inoremap " ""<Left>
inoremap ' ''<Left>
nnoremap <silent> <Leader>m :<C-u>marks<CR>
nnoremap <silent> <Leader>t :<C-u>tags<CR>

nnoremap <silent> <Leader>ev :<C-u>tabedit $MYVIMRC<CR>
nnoremap <silent> <Leader>sv :<C-u>source $MYVIMRC \| if has('gui_running') \| source $MYGVIMRC \| endif<CR>
nnoremap <silent> <Leader>eg :<C-u>tabedit $MYGVIMRC<CR>
nnoremap <silent> <Leader>sg :<C-u>source $MYGVIMRC<CR>
" nnoremap <silent> <Leader>u :<C-u>Unite
"}}}

"---------------------------------------------------------------------------
" IME Controll Settings
"---------------------------------------------------------------------------
"if has('multi_byte_ime')
" highlight CursorIM guifg=NONE guibg=Purple
"fi

" ime setting
"if has('multi_byte_ime') || has('xim') || has('gui_macvim')
"  inoremap <silent> <ESC> <ESC>:set iminsert=0<CR>
"endif

"---------------------------------------------------------------------------
" Functoins
"---------------------------------------------------------------------------
function! s:Today()
  return strftime("%Y-%m-%d")
endfunction

function! s:Tstamp()
  return strftime("%Y-%m-%d %T")
endfunction

"---------------------------------------------------------------------------
"---------------------------------------------------------------------------


"---------------------------------------------------------------------------
"---------------------------------------------------------------------------
augroup QuickfixListener
    autocmd!
    autocmd QuickfixCmdPost vimgrep cw
augroup END

augroup FileTypeSettings
    autocmd!
    autocmd FileType groovy 
          \setl tabstop=4
          \|setl shiftwidth=4
          \|setl expandtab
    autocmd FileType java 
          \setl tabstop=4
          \|setl shiftwidth=4
          \|setl expandtab
    autocmd FileType html
          \setl tabstop=4
          \|setl shiftwidth=4
          \|setl noexpandtab
    autocmd FileType javascript
          \setl tabstop=4
          \|setl shiftwidth=4
          \|setl noexpandtab
    autocmd FileType scheme
          \setl tabstop=2
          \|setl shiftwidth=2
          \|setl expandtab
augroup END

"---------------------------------------------------------------------------
"---------------------------------------------------------------------------
if has('mac')
  "set noimdisableactivate
endif

" Markdown
" augroup MarkdownSyntaxHook
"     autocmd!
"     au Syntax mkd source $VIMRUNTIME/syntax/markdown.vim
" augroup END

"let g:hi_insert = 'highlight StatusLine guifg=darkmagenta guibg=darkgray gui=bold ctermfg=blue ctermbg=darkgray cterm=none'
"let g:hi_normal = 'highlight StatusLine guifg=darkblue guibg=darkgray gui=none ctermfg=darkblue ctermbg=darkyellow cterm=none'

"if has('syntax')
"    augroup InsertHook
"    autocmd!
"	autocmd InsertEnter * silent exec g:hi_insert
"	autocmd InsertLeave * silent exec g:hi_normal
"    augroup END
"endif


"---------------------------------------------------------------------------
" Workspace Settings
"---------------------------------------------------------------------------
let g:ilyaletre_workspace_dir=expand('~/workspace')

"===========================================================================
" Plugin Configurations
"===========================================================================

" CtrlP"{{{
"---------------------------------------------------------------------------
" CtrlP
"---------------------------------------------------------------------------
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_prompt_mappings = {
  \ 'PrtBS()':              ['<c-h>'],
  \ 'PrtCurLeft()':         ['<c-b>'],
  \ 'PrtCurRight()':        ['<c-f>'],
  \ }

"}}}

" Memolist"{{{
"---------------------------------------------------------------------------
" Memolist
"---------------------------------------------------------------------------
let g:memolist_path = expand('$MEMOLIST')
let g:memolist_memo_suffix = "md"
let g:memolist_memo_date = "%Y-%m-%d %H:%M"
let g:memolist_prompt_tags = 1
let g:memolist_prompt_categories = 0
let g:memolist_qfixgrep = 0
let g:memolist_vimfiler = 1
let g:memolist_template_dir_path = expand('$MEMOLIST/templates')
map <Leader>mn  :MemoNew<CR>
map <Leader>ml  :exe "CtrlP" g:memolist_path<CR>
map <Leader>mg  :MemoGrep<CR>
"}}}

"---------------------------------------------------------------------------
" Quickrun
"---------------------------------------------------------------------------
noremap <silent> <Leader>r :<C-u>QuickRun<CR>

" airline {{{
"---------------------------------------------------------------------------
" airline
"---------------------------------------------------------------------------
"let g:airline_theme='hybridline'
"let g:airline_detect_iminsert=1
"let g:airline_left_sep = '»'
"let g:airline_right_sep = '«'

" lightline {{{

" }}}


" Syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

"}}}

"##### auto fcitx  ###########
let g:input_toggle = 1
function! Fcitx2en()
   let s:input_status = system("fcitx-remote")
   if s:input_status == 2
      let g:input_toggle = 1
      echo "switch mode EN"
      let l:a = system("fcitx-remote -c")
   endif
endfunction

function! Fcitx2zh()
   let s:input_status = system("fcitx-remote")
   "if s:input_status != 2 && g:input_toggle == 1
   if s:input_status != 2
      echo "switch mode IM"
      let l:a = system("fcitx-remote -o")
      let g:input_toggle = 0
   endif
endfunction

function! ImInActivate()
  call system('fcitx-remote -c')
endfunction
inoremap <silent> <C-[> <ESC>:call ImInActivate()<CR>

set ttimeoutlen=150
"autocmd InsertLeave * call Fcitx2en()
"autocmd InsertEnter * call Fcitx2zh()

